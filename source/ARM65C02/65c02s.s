	AREA wram_code0, CODE, READWRITE

	INCLUDE equates.h
	INCLUDE 65c02smac.h
	INCLUDE cart.h
	INCLUDE memory.h
	INCLUDE io.h
	INCLUDE gfx.h
	INCLUDE sound.h
	INCLUDE Shared/AsmExtra.h

	IMPORT |wram_globals0$$Base|
	IMPORT ui	;ui.c
	IMPORT quickload	;sram.c
	IMPORT quicksave	;sram.c

	EXPORT CPU_reset
	EXPORT run
	EXPORT op_table
	EXPORT default_scanlinehook
	EXPORT timer_scanlinehook
;	EXPORT irq6502
	EXPORT cpustate
	EXPORT rommap
	EXPORT frametotal
	EXPORT sleeptime
	EXPORT novblankwait
	EXPORT dontstop

;----------------------------------------------------------------------------
_00;   BRK
;----------------------------------------------------------------------------
	mov r11,r11
	[ DEBUG
		adr r0,_00
		mov r1,#0
		bl debug_
	]

	ldr r12,=IRQ_VECTOR
	ldr r0,lastbank
	sub r1,m6502_pc,r0
	add r0,r1,#1
	push16				;save PC

	encodeP (B+R)			;save P
	bl VecCont

	fetch 7
	LTORG
;----------------------------------------------------------------------------
_01;   ORA ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
;----------------------------------------------------------------------------
_04;   TSB $nn
;----------------------------------------------------------------------------
	doZ
	opTSB
nobbranch
	fetch 5
;----------------------------------------------------------------------------
_05;   ORA $nn
;----------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
;----------------------------------------------------------------------------
_06;   ASL $nn
;----------------------------------------------------------------------------
	doZ
	opASL
	fetch_c 5
;----------------------------------------------------------------------------
_08;   PHP
;----------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_09;   ORA #$nn
;----------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
;----------------------------------------------------------------------------
_0A;   ASL
;----------------------------------------------------------------------------
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		;NZ
	orr cycles,cycles,#CYC_C	;Prepare C
	fetch_c 2					;also subs carry
;----------------------------------------------------------------------------
_0C;   TSB $nnnn
;----------------------------------------------------------------------------
	doABS
	opTSB
	fetch 6
;----------------------------------------------------------------------------
_0D;   ORA $nnnn
;----------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
;----------------------------------------------------------------------------
_0E;   ASL $nnnn
;----------------------------------------------------------------------------
	doABS
	opASL
	fetch_c 6
;----------------------------------------------------------------------------
_10x;   BPL *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_10
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_11;   ORA ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opORA
	fetch 5
;----------------------------------------------------------------------------
_12;   ORA ($nn)
;----------------------------------------------------------------------------
	doZPI
	opORA
	fetch 5
;----------------------------------------------------------------------------
_14;   TRB $nn
;----------------------------------------------------------------------------
	doZ
	opTRB
	fetch 5
;----------------------------------------------------------------------------
_15;   ORA $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opORA
	fetch 4
;----------------------------------------------------------------------------
_16;   ASL $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opASL
	fetch_c 6
;----------------------------------------------------------------------------
_18;   CLC
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_C
	fetch 2
;----------------------------------------------------------------------------
_19;   ORA $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opORA
	fetch 4
;----------------------------------------------------------------------------
_1A;   INA
;----------------------------------------------------------------------------
	add m6502_a,m6502_a,#0x01000000
	mov m6502_nz,m6502_a,asr#24		;NZ
	fetch 2
;----------------------------------------------------------------------------
_1C;   TRB $nnnn
;----------------------------------------------------------------------------
	doABS
	opTRB
	fetch 6
;----------------------------------------------------------------------------
_1D;   ORA $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opORA
	fetch 4
;----------------------------------------------------------------------------
_1E;   ASL $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opASL
	fetch_c 6
;----------------------------------------------------------------------------
_20;   JSR $nnnn
;----------------------------------------------------------------------------
	ldrb r2,[m6502_pc],#1
	ldr r1,lastbank
	sub r0,m6502_pc,r1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_21;   AND ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
;----------------------------------------------------------------------------
_24;   BIT $nn
;----------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
;----------------------------------------------------------------------------
_25;   AND $nn
;----------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
;----------------------------------------------------------------------------
_26;   ROL $nn
;----------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
;----------------------------------------------------------------------------
_28;   PLP
;----------------------------------------------------------------------------
	pop8 r0
	decodeP
	sub cycles,cycles,#4*3*CYCLE
	b checkirqdisable		;Fixes?
;	fetch 4
;----------------------------------------------------------------------------
_29;   AND #$nn
;----------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
;----------------------------------------------------------------------------
_2A;   ROL
;----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		;get C
	orrcs m6502_a,m6502_a,#0x00800000
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		;NZ
	adc cycles,cycles,cycles		;Set C
	fetch 2
;----------------------------------------------------------------------------
_2C;   BIT $nnnn
;----------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
;----------------------------------------------------------------------------
_2D;   AND $nnnn
;----------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
;----------------------------------------------------------------------------
_2E;   ROL $nnnn
;----------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
;----------------------------------------------------------------------------
_30x;   BMI *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_30
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_31;   AND ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opAND
	fetch 5
;----------------------------------------------------------------------------
_32;   AND ($nn)
;----------------------------------------------------------------------------
	doZPI
	opAND
	fetch 5
;----------------------------------------------------------------------------
_34;   BIT $nn,X
;----------------------------------------------------------------------------
	doZIX
	opBIT
	fetch 4
;----------------------------------------------------------------------------
_35;   AND $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opAND
	fetch 4
;----------------------------------------------------------------------------
_36;   ROL $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opROL
	fetch 6
;----------------------------------------------------------------------------
_38;   SEC
;----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_C
	fetch 2
;----------------------------------------------------------------------------
_39;   AND $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opAND
	fetch 4
;----------------------------------------------------------------------------
_3A;   DEA
;----------------------------------------------------------------------------
	sub m6502_a,m6502_a,#0x01000000
	mov m6502_nz,m6502_a,asr#24		;NZ
	fetch 2
;----------------------------------------------------------------------------
_3C;   BIT $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opBIT
	fetch 4
;----------------------------------------------------------------------------
_3D;   AND $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opAND
	fetch 4
;----------------------------------------------------------------------------
_3E;   ROL $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opROL
	fetch 6
;----------------------------------------------------------------------------
_40;   RTI
;----------------------------------------------------------------------------
	pop8 r0		;pop 65c02 flags and decode
	decodeP
	pop16		;pop the return address
	encodePC
;	sub cycles,cycles,#6*3*CYCLE	;not implemented yet in Wasabi.
;	b checkirqdisable				;Fixes ???
	fetch 6
;----------------------------------------------------------------------------
_41;   EOR ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
;----------------------------------------------------------------------------
_45;   EOR $nn
;----------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
;----------------------------------------------------------------------------
_46;   LSR $nn
;----------------------------------------------------------------------------
	doZ
	opLSR
	fetch_c 5
;----------------------------------------------------------------------------
_48;   PHA
;----------------------------------------------------------------------------
	mov r0,m6502_a,lsr#24
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_49;   EOR #$nn
;----------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
;----------------------------------------------------------------------------
_4A;   LSR
;----------------------------------------------------------------------------
	movs m6502_nz,m6502_a,lsr#25	;Z, N=0
	mov m6502_a,m6502_nz,lsl#24		;result without garbage
	orr cycles,cycles,#CYC_C		;Prepare C
	fetch_c 2
;----------------------------------------------------------------------------
_4C;   JMP $nnnn
;----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	fetch 3
;----------------------------------------------------------------------------
_4Cx;   JMP $nnnn
;----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
		tst cycles,#BRANCH
		beq checkdeadloop
		bic cycles,cycles,#BRANCH
fini
	encodePC
	fetch 3
checkdeadloop 		;if thisjumpaddr=lastjumpaddr, cycles=0
		ldr addy,lastjump
		cmp addy,m6502_pc
		andeq cycles,cycles,#CYC_MASK	;Save CPU bits
		strne m6502_pc,lastjump
		b fini
lastjump DCD 0
;----------------------------------------------------------------------------
_4D;   EOR $nnnn
;----------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_4E;   LSR $nnnn
;----------------------------------------------------------------------------
	doABS
	opLSR
	fetch_c 6
;----------------------------------------------------------------------------
_50x;   BVC *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_50
	tst cycles,#CYC_V
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_51;   EOR ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opEOR
	fetch 5
;----------------------------------------------------------------------------
_52;   EOR ($nn)
;----------------------------------------------------------------------------
	doZPI
	opEOR
	fetch 5
;----------------------------------------------------------------------------
_55;   EOR $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_56;   LSR $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opLSR
	fetch_c 6
;----------------------------------------------------------------------------
_58;   CLI
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
	sub cycles,cycles,#2*3*CYCLE
	b checkirqs						;Fixes ???
;	fetch 2
;----------------------------------------------------------------------------
_59;   EOR $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_5A;   PHY
;----------------------------------------------------------------------------
	mov r0,m6502_y,lsr#24
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_5D;   EOR $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_5E;   LSR $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opLSR
	fetch_c 6
;----------------------------------------------------------------------------
_60;   RTS
;----------------------------------------------------------------------------
	pop16
	add m6502_pc,m6502_pc,#1
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_61;   ADC ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opADC
	fetch_c 6
;----------------------------------------------------------------------------
_64;   STZ $nn
;----------------------------------------------------------------------------
	doZ
	opSTZ
	fetch 3
;----------------------------------------------------------------------------
_65;   ADC $nn
;----------------------------------------------------------------------------
	doZ
	opADC
	fetch_c 3
;----------------------------------------------------------------------------
_66;   ROR $nn
;----------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
;----------------------------------------------------------------------------
_68;   PLA
;----------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_a,m6502_nz,lsl#24
	fetch 4
;----------------------------------------------------------------------------
_69;   ADC #$nn
;----------------------------------------------------------------------------
	doIMM
	opADC
	fetch_c 2
;----------------------------------------------------------------------------
_6A;   ROR
;----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		;get C
	mov m6502_a,m6502_a,rrx
	movs m6502_nz,m6502_a,asr#24	;NZ
	and m6502_a,m6502_a,#0xff000000
	adc cycles,cycles,cycles		;Set C
	fetch 2
;----------------------------------------------------------------------------
_6C;   JMP ($nnnn)
;----------------------------------------------------------------------------
	doABS
	adr r1,memmap_tbl
	and r2,addy,#0xE000
	ldr r1,[r1,r2,lsr#11]
	ldrb m6502_pc,[r1,addy]!
	ldrb r0,[r1,#1]
	orr m6502_pc,m6502_pc,r0,lsl#8
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_6D;   ADC $nnnn
;----------------------------------------------------------------------------
	doABS
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_6E;   ROR $nnnn
;----------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
;----------------------------------------------------------------------------
_70x;   BVS *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_70
	tst cycles,#CYC_V
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_71;   ADC ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opADC
	fetch_c 5
;----------------------------------------------------------------------------
_72;   ADC ($nn)
;----------------------------------------------------------------------------
	doZPI
	opADC
	fetch_c 5
;----------------------------------------------------------------------------
_74;   STZ $nn,X
;----------------------------------------------------------------------------
	doZIX
	opSTZ
	fetch 4
;----------------------------------------------------------------------------
_75;   ADC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_76;   ROR $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opROR
	fetch 6
;----------------------------------------------------------------------------
_78;   SEI
;----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_I
	fetch 2
;----------------------------------------------------------------------------
_79;   ADC $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_7A;   PLY
;----------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_y,m6502_nz,lsl#24
	fetch 4
;----------------------------------------------------------------------------
_7C;   JMP ($nnnn,X)
;----------------------------------------------------------------------------
	doAIX
	adr r1,memmap_tbl
	and r2,addy,#0xE000
	ldr r1,[r1,r2,lsr#11]
	ldrb m6502_pc,[r1,addy]!
	ldrb r0,[r1,#1]
	orr m6502_pc,m6502_pc,r0,lsl#8
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_7D;   ADC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_7E;   ROR $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opROR
	fetch 6
;----------------------------------------------------------------------------
_80;   BRA branch always
;----------------------------------------------------------------------------
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3							;+1 if pageboundary crossed?
;----------------------------------------------------------------------------
_81;   STA ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opSTORE m6502_a
	fetch 6
;----------------------------------------------------------------------------
_84;   STY $nn
;----------------------------------------------------------------------------
	doZ
	opSTORE m6502_y
	fetch 3
;----------------------------------------------------------------------------
_85;   STA $nn
;----------------------------------------------------------------------------
	doZ
	opSTORE m6502_a
	fetch 3
;----------------------------------------------------------------------------
_86;   STX $nn
;----------------------------------------------------------------------------
	doZ
	opSTORE m6502_x
	fetch 3
;----------------------------------------------------------------------------
_88;   DEY
;----------------------------------------------------------------------------
	sub m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_89;   BIT #$nn
;----------------------------------------------------------------------------
	doIMM
	opBIT
	fetch 2
;----------------------------------------------------------------------------
_8A;   TXA
;----------------------------------------------------------------------------
	mov m6502_a,m6502_x
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_8C;   STY $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTORE m6502_y
	fetch 4
;----------------------------------------------------------------------------
_8D;   STA $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTORE m6502_a
	fetch 4
;----------------------------------------------------------------------------
_8E;   STX $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTORE m6502_x
	fetch 4
;----------------------------------------------------------------------------
_90x;   BCC *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_90
	tst cycles,#CYC_C		;Test Carry
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_91;   STA ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opSTORE m6502_a
	fetch 6
;----------------------------------------------------------------------------
_92;   STA ($nn)
;----------------------------------------------------------------------------
	doZPI
	opSTORE m6502_a
	fetch 5
;----------------------------------------------------------------------------
_94;   STY $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_y
	fetch 4
;----------------------------------------------------------------------------
_95;   STA $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_a
	fetch 4
;----------------------------------------------------------------------------
_96;   STX $nn,Y
;----------------------------------------------------------------------------
	doZIYf
	opSTORE m6502_x
	fetch 4
;----------------------------------------------------------------------------
_98;   TYA
;----------------------------------------------------------------------------
	mov m6502_a,m6502_y
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_99;   STA $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opSTORE m6502_a
	fetch 5
;----------------------------------------------------------------------------
_9A;   TXS
;----------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	strb r0,m6502_s
	fetch 2
;----------------------------------------------------------------------------
_9C;   STZ $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTZ
	fetch 4
;----------------------------------------------------------------------------
_9D;   STA $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opSTORE m6502_a
	fetch 4
;----------------------------------------------------------------------------
_9E;   STZ $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opSTZ
	fetch 5
;----------------------------------------------------------------------------
_A0;   LDY #$nn
;----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_y
	fetch 2
;----------------------------------------------------------------------------
_A1;   LDA ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opLOAD m6502_a
	fetch 6
;----------------------------------------------------------------------------
_A2;   LDX #$nn
;----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_x
	fetch 2
;----------------------------------------------------------------------------
_A4;   LDY $nn
;----------------------------------------------------------------------------
	doZ
	opLOAD m6502_y
	fetch 3
;----------------------------------------------------------------------------
_A5;   LDA $nn
;----------------------------------------------------------------------------
	doZ
	opLOAD m6502_a
	fetch 3
;----------------------------------------------------------------------------
_A6;   LDX $nn
;----------------------------------------------------------------------------
	doZ
	opLOAD m6502_x
	fetch 3
;----------------------------------------------------------------------------
_A8;   TAY
;----------------------------------------------------------------------------
	mov m6502_y,m6502_a
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_A9;   LDA #$nn
;----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_a
	fetch 2
;----------------------------------------------------------------------------
_AA;   TAX
;----------------------------------------------------------------------------
	mov m6502_x,m6502_a
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_AC;   LDY $nnnn
;----------------------------------------------------------------------------
	doABS
	opLOAD m6502_y
	fetch 4
;----------------------------------------------------------------------------
_AD;   LDA $nnnn
;----------------------------------------------------------------------------
	doABS
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_AE;   LDX $nnnn
;----------------------------------------------------------------------------
	doABS
	opLOAD m6502_x
	fetch 4
;----------------------------------------------------------------------------
_B0x;   BCS *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_B0
	tst cycles,#CYC_C		;Test Carry
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_B1;   LDA ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opLOAD m6502_a
	fetch 5
;----------------------------------------------------------------------------
_B2;   LDA ($nn)
;----------------------------------------------------------------------------
	doZPI
	opLOAD m6502_a
	fetch 5
;----------------------------------------------------------------------------
_B4;   LDY $nn,X
;----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_y
	fetch 4
;----------------------------------------------------------------------------
_B5;   LDA $nn,X
;----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_B6;   LDX $nn,Y
;----------------------------------------------------------------------------
	doZIY
	opLOAD m6502_x
	fetch 4
;----------------------------------------------------------------------------
_B8;   CLV
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_V
	fetch 2
;----------------------------------------------------------------------------
_B9;   LDA $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_BA;   TSX
;----------------------------------------------------------------------------
	ldrb m6502_x,m6502_s
	mov m6502_x,m6502_x,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_BC;   LDY $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opLOAD m6502_y
	fetch 4
;----------------------------------------------------------------------------
_BD;   LDA $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_BE;   LDX $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opLOAD m6502_x
	fetch 4
;----------------------------------------------------------------------------
_C0;   CPY #$nn
;----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_y
	fetch_c 2
;----------------------------------------------------------------------------
_C1;   CMP ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opCOMP m6502_a
	fetch_c 6
;----------------------------------------------------------------------------
_C4;   CPY $nn
;----------------------------------------------------------------------------
	doZ
	opCOMP m6502_y
	fetch_c 3
;----------------------------------------------------------------------------
_C5;   CMP $nn
;----------------------------------------------------------------------------
	doZ
	opCOMP m6502_a
	fetch_c 3
;----------------------------------------------------------------------------
_C6;   DEC $nn
;----------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
;----------------------------------------------------------------------------
_C8;   INY
;----------------------------------------------------------------------------
	add m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_C9;   CMP #$nn
;----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_a
	fetch_c 2
;----------------------------------------------------------------------------
_CA;   DEX
;----------------------------------------------------------------------------
	sub m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_CB;   WAI
;----------------------------------------------------------------------------
	fetch 3
;----------------------------------------------------------------------------
_CC;   CPY $nnnn
;----------------------------------------------------------------------------
	doABS
	opCOMP m6502_y
	fetch_c 4
;----------------------------------------------------------------------------
_CD;   CMP $nnnn
;----------------------------------------------------------------------------
	doABS
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_CE;   DEC $nnnn
;----------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_D0x;   BNE *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_D0
	tst m6502_nz,#0xff
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_D1;   CMP ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opCOMP m6502_a
	fetch_c 5
;----------------------------------------------------------------------------
_D2;   CMP ($nn)
;----------------------------------------------------------------------------
	doZPI
	opCOMP m6502_a
	fetch_c 5
;----------------------------------------------------------------------------
_D5;   CMP $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_D6;   DEC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_D8;   CLD
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_D
	fetch 2
;----------------------------------------------------------------------------
_D9;   CMP $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_DA;   PHX
;----------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_DB;   STP
;----------------------------------------------------------------------------
	fetch 3
;----------------------------------------------------------------------------
_DD;   CMP $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_DE;   DEC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_E0;   CPX #$nn
;----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_x
	fetch_c 2
;----------------------------------------------------------------------------
_E1;   SBC ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opSBC
	fetch_c 6
;----------------------------------------------------------------------------
_E4;   CPX $nn
;----------------------------------------------------------------------------
	doZ
	opCOMP m6502_x
	fetch_c 3
;----------------------------------------------------------------------------
_E5;   SBC $nn
;----------------------------------------------------------------------------
	doZ
	opSBC
	fetch_c 3
;----------------------------------------------------------------------------
_E6;   INC $nn
;----------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
;----------------------------------------------------------------------------
_E8;   INX
;----------------------------------------------------------------------------
	add m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_E9;   SBC #$nn
;----------------------------------------------------------------------------
	doIMM
	opSBC
	fetch_c 2
;----------------------------------------------------------------------------
_EA;   NOP
;----------------------------------------------------------------------------
	fetch 2
;----------------------------------------------------------------------------
_EC;   CPX $nnnn
;----------------------------------------------------------------------------
	doABS
	opCOMP m6502_x
	fetch_c 4
;----------------------------------------------------------------------------
_ED;   SBC $nnnn
;----------------------------------------------------------------------------
	doABS
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_EE;   INC $nnnn
;----------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
;----------------------------------------------------------------------------
_F0x;   BEQ *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_F0
	tst m6502_nz,#0xff
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2


;	cmp r0,#-4						;speed hack for Ballon Fight.
;	andcs cycles,cycles,#CYC_MASK	;speed hack 
;	fetch 3
;nobranch
;	add m6502_pc,m6502_pc,#1
;	fetch 2
;----------------------------------------------------------------------------
_F1;   SBC ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opSBC
	fetch_c 5
;----------------------------------------------------------------------------
_F2;   SBC ($nn)
;----------------------------------------------------------------------------
	doZPI
	opSBC
	fetch_c 5
;----------------------------------------------------------------------------
_F5;   SBC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_F6;   INC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opINC
	fetch 6
;----------------------------------------------------------------------------
_F8;   SED
;----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_D
	fetch 2
;----------------------------------------------------------------------------
_F9;   SBC $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_FA;   PLX
;----------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_x,m6502_nz,lsl#24
	fetch 4
;----------------------------------------------------------------------------
_FD;   SBC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_FE;   INC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opINC
	fetch 6
;----------------------------------------------------------------------------
opADC_Dec
;----------------------------------------------------------------------------
	opADCD
	fetch_c 5
;----------------------------------------------------------------------------
opSBC_Dec
;----------------------------------------------------------------------------
	opSBCD
	fetch_c 5
;----------------------------------------------------------------------------
run	;r0=0 to return after frame
;----------------------------------------------------------------------------
	mov r1,#0
	strb r1,novblankwait

	str r0,dontstop
	tst r0,#1
	stmeqfd sp!,{r4-r11,lr}

	ldr globalptr,=|wram_globals0$$Base|
	ldr cpu_zpage,=NES_RAM
	b line0x
;----------------------------------------------------------------------------
;cycles ran out
;----------------------------------------------------------------------------
line0
	adr r2,cpuregs
	stmia r2,{m6502_nz-m6502_pc}	;@ save 65c02 state
waitformulti
	ldr r1,=REG_P1				;@ refresh input every frame
	ldrh r0,[r1]
		eor r0,r0,#0xff
		eor r0,r0,#0x300		;@ r0=button state (raw)
	ldr r1,AGBjoypad
	eor r1,r1,r0
	and r1,r1,r0				;@ r1=button state (0->1)
	str r0,AGBjoypad

	ldr r2,dontstop
	cmp r2,#0
	ldmeqfd sp!,{r4-r11,lr}		;@ exit here if doing single frame:
	bxeq lr						;@ return to rommenu()

	;@----anything from here til line0x won't get executed while rom menu is active---

	mov r2,#REG_BASE
	mov r3,#0x0110
	strh r3,[r2,#REG_BLDCNT]	;@ stop darkened screen,OBJ blend to BG0
	mov r3,#0x1000				;@ BG0=16, OBJ=0
	strh r3,[r2,#REG_BLDALPHA]	;@ Alpha values

	adr lr,line0x				;@ return here after doing L/R + SEL/START

	tst r1,#0x300				;@ if L or R was pressed
	tstne r0,#0x100
	tstne r0,#0x200				;@ and both L+R are held..
	ldrne r1,=ui
	bxne r1						;@ do menu

	ands r3,r0,#0x300			;@ if either L or R is pressed (not both)
	eornes r3,r3,#0x300
	bicne r0,r0,#0x0c			;@ hide sel,start from EMU
	str r0,NESjoypad
	beq line0x					;@ skip ahead if neither or both are pressed

	tst r0,#0x200
	tstne r1,#4					;@ L+SEL for BG adjust
	ldrne r2,adjustblend
	addne r2,r2,#1
	strne r2,adjustblend

	tst r0,#0x200				;@ L?
	tstne r1,#8					;@ START?
	ldrb r2,novblankwait		;@ 0=Normal, 1=No wait, 2=Slomo
	addne r2,r2,#1
	cmp r2,#3
	moveq r2,#0
	strb r2,novblankwait

	tst r0,#0x100				;@ R?
	tstne r1,#8					;@ START:
	ldrne r1,=quickload
	bxne r1

	tst r0,#0x100				;@ R?
	tstne r1,#4					;@ SELECT:
	ldrne r1,=quicksave
	bxne r1
line0x
	bl refreshNESjoypads		;@ Z=1 if communication ok
	bne waitformulti			;@ waiting on other GBA..

	ldr r0,AGBjoypad
	ldr r2,fiveminutes			;@ sleep after 5/10/30 minutes of inactivity
	cmp r0,#0					;@ (left out of the loop so waiting on multi-link
	ldrne r2,sleeptime			;@ doesn't accelerate time)
	subs r2,r2,#1
	str r2,fiveminutes
	bleq suspend

	mov r1,#0
	strb r1,ppustat				;@ vbl clear, sprite0 clear
	str r1,scanline				;@ reset scanline count

	bl newframe					;@ display update
	bl updatesound

;-----------------------------------
;	ldr r0,=0x04000006	;to write out the scanline
;	ldrh r0,[r0]
;	mov r1,#19
;	bl debug_
;-----------------------------------


 [ BUILD <> "DEBUG"
	ldrb r4,novblankwait
	teq r4,#1				;NoVSync?
	beq l03
l01
	mov r0,#0				;don't wait if not necessary
	mov r1,#1				;VBL wait
	swi 0x040000			; Turn of CPU until VBLIRQ if not too late allready.
	teq r4,#2				;Slomo?
	moveq r4,#0
	beq l01
l03
 ]
	ldr r0,fpsvalue
	add r0,r0,#1
	str r0,fpsvalue

	adr r0,cpuregs
	ldmia r0,{m6502_nz-m6502_pc}	;restore 65c02s state

	ldr r0,cyclesperscanline
	add cycles,cycles,r0
	adr r0,line1_to_160
	str r0,nexttimeout

	ldr pc,scanlinehook
line1_to_160 ;------------------------
	ldr r0,cyclesperscanline
	add cycles,cycles,r0

	ldr r1,scanline
	add r1,r1,#1
	str r1,scanline
	cmp r1,#160
	ldrne pc,scanlinehook

	adr addy,line160
	str addy,nexttimeout
	ldr pc,scanlinehook

line160 ;------------------------
NMIDELAY EQU CYCLE*30
	add cycles,cycles,#NMIDELAY	;NMI is delayed a few cycles..

	mov r1,#0x80
	strb r1,ppustat		;vbl flag

	adr addy,line161NMI
	str addy,nexttimeout
	b default_scanlinehook
line161NMI ;---------------------------
	ldr r0,frame
	add r0,r0,#1
	str r0,frame
 [ DEBUG
	mov r1,#REG_BASE			;darken screen during NES vblank
	mov r0,#0x00f1
	strh r0,[r1,#REG_BLDCNT]
	ldrh r0,[r1,#REG_VCOUNT]
	mov r1,#19
	bl debug_
 ]
	ldrb r0,lcdctrl
	tst r0,#0x01
	beq %F0			;NMI?

	ldr r12,=NMI_VECTOR
	bl Vec65c02
	sub cycles,cycles,#3*7*CYCLE
0
	ldr r0,cyclesperscanline
	add cycles,cycles,r0
	sub cycles,cycles,#NMIDELAY
	adr r1,line162_to_end
	str r1,nexttimeout

	mov r0,#161
	str r0,scanline

	ldr pc,scanlinehook
line162_to_end ;------------------------
	ldr r0,cyclesperscanline
	add cycles,cycles,r0

	ldr r1,scanline
	ldr r2,lastscanline
	add r1,r1,#1
	str r1,scanline
	cmp r1,r2
	adreq addy,line0
	streq addy,nexttimeout

	ldr pc,scanlinehook

timer_scanlinehook
	ldrb r1,lcdctrl
	ldr r0,timerval
	tst r1,#0x10
	subeqs r0,r0,#64
	subnes r0,r0,#1
	str r0,timerval
	bpl checkirqdisable
	ldrb r0,irq_r
	orr r0,r0,#1
	strb r0,irq_r

checkirqdisable
	tst cycles,#CYC_I
	bne default_scanlinehook		;we dont want no stinkin irqs
checkirqs
	ldrb r0,irq_r
	ldrb r1,lcdctrl
	and r0,r0,r1,lsr#1
	tst r0,#3
	bne irq65c02			;Timer & DMA interrupt
; - - - - - - - - - - - - - - - - - - -

default_scanlinehook
	fetch 0
;----------------------------------------------------------
irq65c02
;----------------------------------------------------------
	ldr r12,=IRQ_VECTOR
	bl Vec65c02
	fetch 7
;----------------------------------------------------------
Vec65c02
;----------------------------------------------------------
	ldr r0,lastbank
	sub r0,m6502_pc,r0
	push16					;save PC

	encodeP (R)				;save P
VecCont
	push8 r0

	orr cycles,cycles,#CYC_I	;disable IRQ
	bic cycles,cycles,#CYC_D	;and decimal mode

	ldr r0,memmap_tbl+7*4
	ldrb m6502_pc,[r0,r12]!
	ldrb r2,[r0,#1]
	orr m6502_pc,m6502_pc,r2,lsl#8
	encodePC				;get IRQ vector

	bx lr
;----------------------------------------------------------------------------
fiveminutes DCD 5*60*60
sleeptime DCD 5*60*60
dontstop DCD 0
novblankwait DCB 0
;----------------------------------------------------------------------------
	AREA rom_code, CODE, READONLY
;----------------------------------------------------------------------------
_xx;	???					;invalid opcode
;----------------------------------------------------------------------------
	mov r11,r11
	[ DEBUG
		adr r0,_xx
		mov r1,#0
		bl debug_
	]
	fetch 2

;----------------------------------------------------------------------------
CPU_reset	;called by loadcart (r0-r9 are free to use)
;----------------------------------------------------------------------------
	str lr,[sp,#-4]!

;	bl IO_reset
;	bl Sound_reset
;	bl GFX_reset
;---NTSC
	ldr r1,=768*CYCLE		;NTSC		256*3
	str r1,cyclesperscanline
	ldr r1,=256				;NTSC
	str r1,lastscanline
;---cpu reset
	tst r0,#NOCPUHACK	;load opcode set
	adr r1,jmpops
	adrne r1,normalops
	adr r3,opindex
	mov r4,#8
nr0	ldr r5,[r1,r4,lsl#2]
	ldr r6,[r3,r4,lsl#2]
	str r5,[r6]
	subs r4,r4,#1
	bpl nr0

	mov m6502_a,#0
	mov m6502_x,#0
	mov m6502_y,#0
	mov m6502_nz,#0
	adr m6502_rmem,readmem_tbl
	ldr r0,=NES_RAM+0x1ff
	str r0,m6502_s		;S=FF
	mov cycles,#CYC_I		;V=0, D=0, C=0, I=1 disable IRQ.

	str m6502_a,frame		;frame count reset

	;(clear irq/nmi/res source)...

	ldr r12,=RES_VECTOR
	bl Vec65c02

	adr r0,cpuregs
	stmia r0,{m6502_nz-m6502_pc}
	ldr pc,[sp],#4
normalops
	DCD _10,_30,_50,_70,_90,_B0,_D0,_F0,_4C
jmpops
	DCD _10x,_30x,_50x,_70x,_90x,_B0x,_D0x,_F0x,_4Cx
opindex
	DCD op_table+0x10*4,op_table+0x30*4,op_table+0x50*4,op_table+0x70*4,op_table+0x90*4
	DCD op_table+0xB0*4,op_table+0xD0*4,op_table+0xF0*4,op_table+0x4C*4
;----------------------------------------------------------
	AREA wram_globals0, CODE, READWRITE

op_table
	DCD _00,_01,_xx,_xx,_04,_05,_06,_xx,_08,_09,_0A,_xx,_0C,_0D,_0E,_xx
	DCD _10,_11,_12,_xx,_14,_15,_16,_xx,_18,_19,_1A,_xx,_1C,_1D,_1E,_xx
	DCD _20,_21,_xx,_xx,_24,_25,_26,_xx,_28,_29,_2A,_xx,_2C,_2D,_2E,_xx
	DCD _30,_31,_32,_xx,_34,_35,_36,_xx,_38,_39,_3A,_xx,_3C,_3D,_3E,_xx
	DCD _40,_41,_xx,_xx,_xx,_45,_46,_xx,_48,_49,_4A,_xx,_4C,_4D,_4E,_xx
	DCD _50,_51,_52,_xx,_xx,_55,_56,_xx,_58,_59,_5A,_xx,_xx,_5D,_5E,_xx
	DCD _60,_61,_xx,_xx,_64,_65,_66,_xx,_68,_69,_6A,_xx,_6C,_6D,_6E,_xx
	DCD _70,_71,_72,_xx,_74,_75,_76,_xx,_78,_79,_7A,_xx,_7C,_7D,_7E,_xx
	DCD _80,_81,_xx,_xx,_84,_85,_86,_xx,_88,_89,_8A,_xx,_8C,_8D,_8E,_xx
	DCD _90,_91,_92,_xx,_94,_95,_96,_xx,_98,_99,_9A,_xx,_9C,_9D,_9E,_xx
	DCD _A0,_A1,_A2,_xx,_A4,_A5,_A6,_xx,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_xx
	DCD _B0,_B1,_B2,_xx,_B4,_B5,_B6,_xx,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_xx
	DCD _C0,_C1,_xx,_xx,_C4,_C5,_C6,_xx,_C8,_C9,_CA,_xx,_CC,_CD,_CE,_xx
	DCD _D0,_D1,_D2,_xx,_xx,_D5,_D6,_xx,_D8,_D9,_DA,_xx,_xx,_DD,_DE,_xx
	DCD _E0,_E1,_xx,_xx,_E4,_E5,_E6,_xx,_E8,_E9,_EA,_xx,_EC,_ED,_EE,_xx
	DCD _F0,_F1,_F2,_xx,_xx,_F5,_F6,_xx,_F8,_F9,_FA,_xx,_xx,_FD,_FE,_xx
  ;readmem_tbl
	DCD ram_R	;$0000
	DCD IO_R	;$2000
	DCD vram_R	;$4000
	DCD empty_R	;$6000
	DCD rom_R80	;$8000
	DCD rom_RA0	;$A000
	DCD rom_RC0	;$C000
	DCD rom_RE0	;$E000
  ;writemem_tbl
	DCD ram_W	;$0000
	DCD IO_W	;$2000
	DCD vram_W	;$4000
	DCD empty_W	;$6000
	DCD empty_W	;$8000
	DCD empty_W	;$A000
	DCD empty_W	;$C000
	DCD empty_W	;$E000
   ;memmap_tbl
	DCD NES_RAM		;$0000   0000-7fff
	DCD NES_RAM		;$2000    should
	DCD NES_RAM		;$4000     never
	DCD NES_RAM		;$6000      change
rommap	% 4*4		;$8000-FFFF

cpustate
	;group these together for save/loadstate
	% 7*4 ;cpuregs (nz,v,a,x,y,cycles/c,pc)
	DCD 0 ;m6502_s:
	DCD 0 ;breakp:
	DCD 0 ;lastbank: last memmap added to PC (used to calculate current PC)

	DCD 0 ;nexttimeout:  jump here when cycles runs out
	DCD 0 ;scanline
	DCD 0 ;scanlinehook
frametotal		;let ui.c see frame count for savestates
	DCD 0 ;frame
	DCD 0 ;cyclesperscanline (768*CYCLE)
	DCD 0 ;lastscanline (256)
;----------------------------------------------------------------------------
	END

